Advantages of Ruby:
The code written in Ruby is small, elegant and powerful as it has fewer number of lines of code.
Ruby allows simple and fast creation of Web application which results in less hard work.
As Ruby is free of charge that is Ruby is free to copy, use, modify, it allow programmers to make necessary changes as and when required.
Ruby is a dynamic programming language due to which there is no tough rules on how to built in features and it is very close to spoken languages.

Disadvantages of Ruby:
Ruby is fairly new and has its own unique coding language which makes it difficult for the programmers to code in it right away but after some practice its easy to use. Many programmers prefer to stick to what they already know and can develop.
The code written in Ruby is harder to debug, since most of the time it generates at runtime, so it becomes difficult to read while debugging.
Ruby does not have a plenty of informational resources as compared to other programming languages.
Ruby is an interpreted scripting language, the scripting languages are usually slower than compiled languages therefore, Ruby is slower than many other languages. 

Maths: Simple mathematical functions can be carried out within the puts statements. Just as we use ‘%d’ or ‘%f’ and ‘&’ in C,we will use ‘#{ } in Ruby to get our work done.
puts "Alok has #{25+30/6} Rupees in his pocket"

Variables and Names : Variables in ruby are the same as that of any other dynamic programming language. You just don’t need to mention its type and ruby will know its type automatically.
Example:
cars = 100
drivers = 30
puts "There are #{cars} cars and #{drivers} drivers."

. Getting input(String Only)
‘gets.chomp’ is used to take input from user.
age = gets.chomp

Prompting people for numbers
gets.chomp.to_i is used to get integer input from user.
gets.chomp.to_f is used to get float(decimal) input from user.

All data types are based on classes because it is a pure Object-Oriented language.
      There are different data types in Ruby as follows:
	Numbers :- integers and float
		According to their size, there are two types of integers, one is Bignum and second is Fixnum. But now both are unified in 		one integer class.
	Boolean
	Strings
	Hashes  :- Ways to create a Hash in Ruby -
			'Using Hash Literals' And 'Using the Hash Class'
			1.  Hash_Name = { "key1" => "value1", "key2" => "value2" }
			2a. empty_hash = Hash.new
			2b. Hash_Name = Hash["key1", "value1", "key2", "value2"]
		Accessing Values - puts hash["key1"]  # Output: "value1"
		Modifying Values - hash["key2"] = "value2" (Add 2nd key value pair)
		Updating  - hash["key1"] = "new_value"
		Check if Key Exists: puts hash.key?("key1")   # true or false
		Check if Value Exists: puts hash.value?("value1")
	Arrays  :- Syntax -- ary = [ "fred", 10, 3.14, "This is a string", "last element", ]
		   It can contain all types of data.
	Symbols :- Symbols are light-weight strings. Used instead of strings because they can take up much less memory.
			Characteristics :- * Immutability *Uniqueness (:example.object_id == :example.object_id)
			Creating Symbols :- prefixing a colon (:) to a name. (:age, :city)
# Ruby program of BEGIN and END 
If there is more than one BEGIN statement in a program, they are executed in the order If there is more than one END
statement, they are executed in the reverse of the order.

puts "This is main body of program"
END
{ 
puts "END of the program"
} 
BEGIN
{ 
puts "BEGINNING of the Program"
} 
(1st begin is printed then main body then end is printed)

Ruby comments   #This is a single line comment
		=begin
This is another‎‍
way of writing 
comments in a 
block fashion
		=end
-----------------------------------------------------------------------------------------------------------------------------
There are different types of variables in Ruby:
	1. Local variables :-  A local variable is only accessible within the block of its initialization.
	2. Instance variables :- Always starts with a @.Instance variables are associated with a specific instance of a class. They are 				 accessible to all instance methods of the class.
	3. Class variables :- Class variables are shared among all instances of a class. They are used to store information that is 				common to all objects of the class. Start with `@@`.
	4. Global variables :- Global variables are accessible from anywhere in the Ruby program. They should be used sparingly as they 				can lead to code that is difficult to maintain and debug. Start with a $ symbol.

Ruby provides the 3 types of ranges as follows:
		1. Ranges as Sequences :- Two operators are used for creating ranges, one is Double Dot (..) operator and the another 			one is Triple Dot (…) operator.
Code :-- 1a. (1..5).to_a  # => [1, 2, 3, 4, 5]
1b. Iterating over a range:
(1..5).each do |number|
  puts number
end			
		2. Ranges as Conditions :- Ranges can also be defined as conditional expressions in looping.They act as flip-flops
Code :-- 2a. 
puts i if (i == 3)..(i == 6)
2b. 
(1..10).each do |i|
  puts i if (i == 3)..(i == 6)
end
		3. Ranges as Intervals :-  To check that the given value falls within the interval or not.
Code :-- 3a. 
range = (10..20)
puts range.include?(15)  # => true
puts range.include?(25)  # => false
 Note - In ruby you cannot create reverse order directly. In order to print a reverse order of given range, always use the reverse() 	method with range operators. 
		ex- puts ('W'..'Z').to_a.reverse,  print- z,y,x,w 

Ruby Literals
Any constant value which can be assigned to the variable
These are following literals in Ruby.

Booleans and nil
Numbers or Integers :-  Ruby allows any number of ‘_’ in it’s numbers. 100 or 1_00 or 10_0 all same 
Syntax :
	decimal(0d or 0D)
	octal(0o or 0O or 0)
	hex-decimal(0x or 0X)	ex- puts("hexa-", 0xaa ); 
	binary(0b or 0B).
	float(num- or numE1)	ex- puts("Float-", 1.234E1);

Strings :- It is same as python. The string can be expressed with either “” or ”, where “” allows the escaped characters for interpolation.
Symbols
Ranges
Arrays
Hashes
Regular Expressions
Syntax :
	/pattern/ or %r{pattern}

Ruby Directories
For Ruby, the Dir class and the FileUtils module manages directories and the File class handles the files.
Creating Ruby directories: Dir.mkdir "name_of_directory"
Checking Ruby directories: Dir.exist?"name_of_directory"
Empty or not : Dir.empty?"name_of_directory"
Create a new directory object: obj=Dir.new("name_of_directory")
Current directory: Dir.pwd
Return the home directory: Dir.home
The path() method of Dir class is used to return the path parameter. 
	Syntax:	d=Dir.new("name_of_directory")
		d.path
The getwd() method of Dir class is used to return the path of the current directory. 
	Syntax:	Dir.getwd
The chdir() method used to change working directory. 
	Syntax:	Dir.chdir("name_of_directory")
Work like ls :- Dir.entries (list as array)
The glob() method in Dir class is used to display all the files having a certain matching pattern. 
	Syntax:	Dir.glob("pattern")
Removing Ruby Directories : There are various methods in class Dir to remove Ruby Directories like rmdir(), delete() and unlink() 
Creating nested directory: mkdir_p() method in FileUtils module is used to create a directory and all its parent directories. 
	Syntax:	FileUtils.mkdir_p 'directory_path'
Moving files and folders: mv() and move() methods in FileUtils
	Syntax:	FileUtils.mv("source", "destination")
Copying files from one directory to another directory: FileUtils.cp("source", "destination")
Ruby | Operators
	1. Arithmetic Operators
		Addition(+)
		Subtraction(-) 
		Multiplication(*) 
		Division(/) 
		Modulus(%) 
		Exponent(**)
	2. Comparison Operators
		Equal To(==) 
		Not Equal To(!=) 
		Greater Than(>) 
		Less than(<) 
		Greater Than Equal To(>=) 
		Less Than Equal To(<=)
		Combined combination (<=>) :- Operator return 0 when first operand equal to second, return 1 when first operand is 			greater than second operand, and return -1 when first operator is less than second operand.
		Case Equality Operator(===):- It will test equality in case statement.
		‘.eql?’ This operator returns true if the receiver and argument have both the same type and equal values.
		‘Equal?’ This operator Returns true if the receiver and argument have the same object id.
	3. Logical Operators
		Logical AND(&&) 
		Logical OR(||)
		Logical NOT(!)
	4. Assignment Operators
		Simple Assignment (=)
		Add AND Assignment (+=) 
		Subtract AND Assignment (-=) 
		Multiply AND Assignment (*=) 
		Divide AND Assignment (/=) 
		Modulus AND Assignment (%=) operator is used for assigning modulo of left operand with right operand and then assigning 			it to variable on the left.
		Exponent AND Assignment (**=) operator is used for raising power of left operand to right operand and assigning it to 			variable on the left.
	5. Bitwise Operators
		Bitwise AND (&) Takes two numbers as operands and does AND on every bit of two numbers. The result of AND is 1 only if 			both bits are 1.
		Bitwise OR (|) 
		Bitwise XOR (^) 
		Left Shift (<<) Takes two numbers, left shifts the bits of the first operand, the second operand decides the 				number of places to shift.
		Right Shift (>>) 
		Ones Complement (~) This operator takes a single number and used to perform complement operation of 8-bit.
	6. Ternary Operator
		It is a conditional operator which is a shorthand version of the if-else statement.
		Syntax:	condition ? first_expression : second_expression;
	7. Range Operators
		Double Dot (..) 
		Triple Dot (…)
	8. defined? Operator
		The defined? operator in Ruby is used to check if a variable, method, constant, or expression is defined or not. It returns a 			description of the type of the defined item or nil if the item is not defined. This operator is useful for avoiding errors that can 		occur when you try to use a variable or method that hasn't been defined yet.
		   Syntax:defined? expression_to_be_checked 
	9. Dot “.” and Double Colon “::” Operators
		Dot (.) operator is used to access the methods of a class.
		Double Colon (::) operator is used to access the constants, class methods, and instance methods defined within a class or module to 		anywhere outside the class or module. The important point to remember is that classes and methods may be considered constants in 		Ruby and also prefix the :: Const_name with the expression which returns the appropriate class object. If no prefix expression is 		used then by default the main Object class is used.


Operator		Category

[ ] [ ]=		Element reference, element set
**			Exponentiation
!, ~, +			Boolean NOT, bitwise complement, unary plus
*, /, %			Multiplication, division, modulo (remainder)
+, –			Addition (or concatenation), subtraction
< <, > >		Bitwise shift-left (or append), bitwise shift-right
&			Bitwise AND
|, ^			Bitwise OR, bitwise XOR
>, >=, <, <=		Ordering
------------------------------------------------------------------
<=>, ==, ===,
 !=, =~, !~ 		Equality, pattern matching, comparison
------------------------------------------------------------------
&&			Logical AND
||			Boolean OR
| |			Logical OR
.., …=			Range creation and Boolean flip-flops
?, :			Conditional
modifier-rescue		Exception-handling modifier
=, +=, -=, etc.		Assignment
defined?		Test variable definition and type
not			Boolean NOT (low precedence)
or, and			Boolean OR, Boolean AND
------------------------------------------------------------------
modifier-if,
 modifier-unless, 
modifier-while, 
modifier-until		Conditional and loop modifiers
------------------------------------------------------------------
begin/end		blocks

Ruby | unless Statement and unless Modifier
Unless statement is used when we require to print false condition
unless Modifier: You can also use unless as a modifier to modify an expression. When you use unless as a modifier the left-hand side behaves as a 	then condition and right-hand side behaves as a test condition.
	Syntax:	`statement unless condition`
____________________________________________________________________________________________________________________________________________________
$ Decision-Making Statements in Ruby: 
	# if statement
	# if-else statement
	# if – elsif ladder
	# Ternary statement

$ The loops in Ruby are :
	# while loop
	# for loop
	 Syntax -
	for a in 1..5 do
	   puts "Hello World"
	  end
----------------------------
	# do..while loop
	 Syntax - 
	loop do
	 puts "GeeksforGeeks"
	 val = '7'
	 # using boolean expressions
	 if val == '7'
	  break
	 end
	# ending of ruby do..while loop 
	end
--------------------------------
	# until loop
	 Syntax-
	until conditional [do]
	 # code to be executed
	end
$ Ruby | Case Statement
	Syntax:
case expression
when expression 1
  # your code
when expression 2
  # your code
.
.
else
  # your code
end
Important Points:
	@ In case statement the when statement can contain multiple values and range.
	@ You can use case statement in method call. Like method call, a case statement will always return a single object.
$ Ruby | Control Flow Alteration
	# break statement :- Used to exit a loop
		Ex - break if x > 3
	# next statement :- Used to jump to the next iterator
	# redo statement :- Used to restart the current iteration (i value remain same)
	# retry statement :- To repeat the whole loop iteration from the start 
	# return statement :- Used to exit from a method
	# throw/catch statement :- Throw is used to break the current loop and transfer the control outside of the catch 			block.